
1) git init
2) git status 
3) git add "file"
4) git commit -m "bug fix"


Git Branching

1) git branch feature_1 (creates a new branch)
2) git checkout feature_1 (checks out to this branch)
3) git checkout -b feature_1 (creates new branch and checks out to this branch)
4) git branch -m feature_1  feature_2 

git merge

1) choose target branch --> git checkout main
	git merge feature_1 (this merges feature_1 to main)

	--> Also, this will create a new merge commit

Merge Conflict

1) Three way merge -> 
A three-way merge happens when there have been other changes on the main branch while you were working on your feature. In this 
your side branch doesn’t directly fit onto the end of the main branch anymore. To merge your changes with the main branch, Git uses a special process. 
It looks at three points: the end of your feature branch, the end of the main branch, and where both branches were last the same. 
Git then figures out how to combine these changes. In this case, there can be merge conflicts that you will have to resolve.

Cons
a) Jumbled up main branch which will not have clean linear commit history
	by this say you encounter a bug and want to revert to particular commit, 

2) Rebase

Using git rebase allows you to integrate changes from one branch into another, but instead of creating a merge commit, it re-applies your changes 
on top of the other branch. This can lead to a cleaner project history. Here’s a comprehensive guide to using git rebase
		a) git checkout feature_1
		b) git rebase main
		c) git merge feature_1


Merge v/s Rebase

Merge: Keeps the original history and adds a new commit that merges two branches.
Rebase: Moves the entire branch to start from a different point, creating a straight, linear history.

Head in git